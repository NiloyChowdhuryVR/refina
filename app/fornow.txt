<div className="min-h-[calc(100vh-3.75rem)] flex items-center justify-center bg-[#F4F1E8] p-6">
      <div className="bg-white shadow-lg rounded-2xl p-6 max-w-3xl w-full flex flex-col gap-6">
        <h1 className="text-xl font-bold text-center">
          ðŸ–¼ Upload an Image + Add Prompt
        </h1>

        {/* Upload */}
        <UploadDropzone
          className="ut-button:h-10"
          appearance={{
            container: { background: "red" },
            uploadIcon: { background: "yellow", color: "blue" },
            label: { color: "pink" },
            allowedContent: { color: "cyan" },
            button: { width: "150px", background: "orange", color: "black" },
          }}
          endpoint="imageUploader"
          onClientUploadComplete={(res) => {
            console.log("Files: ", res);
            setImageUrl(res[0].ufsUrl);
          }}
          onUploadError={(error: Error) => {
            console.log(`ERROR! ${error.message}`);
          }}
        />

        {/* Preview Uploaded Image */}
        {imageUrl && (
          <div className="flex justify-center">
            <Image
              src={imageUrl}
              alt="uploaded image"
              className="rounded-lg"
              width={200}
              height={200}
            />
          </div>
        )}

        {/* Prompt Form */}
        <form onSubmit={handleSubmit} className="space-y-4">
          <textarea
            placeholder="Enter your prompt"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            className="w-full border rounded-lg p-2 h-24"
            required
          />

          <button
            type="submit"
            disabled={loading}
            className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 rounded-lg font-semibold"
          >
            {loading ? "Processing..." : "Generate"}
          </button>
        </form>

        {/* AI Response */}
        {responseText && (
          <div className="mt-4 p-3 bg-gray-50 rounded-lg text-sm">
            <strong>AI Response:</strong>
            <p>{responseText}</p>
          </div>
        )}

        {/* Generated Images */}
        {images.length > 0 && (
          <div className="mt-4 grid grid-cols-1 sm:grid-cols-2 gap-4">
            {images.map((url, i) => (
              <div key={i} className="flex flex-col items-center">
                <img
                  src={url}
                  alt={`AI generated ${i + 1}`}
                  className="w-full rounded-lg border"
                />
                <button
                  onClick={() => handleDownload(url, i)}
                  className="mt-2 bg-green-600 hover:bg-green-700 text-white py-1 px-3 rounded-lg text-sm"
                >
                  Download
                </button>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>